/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.ag.opensource.springtopics.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.ag.opensource.springtopics.model.EmployeeDto;
import org.ag.opensource.springtopics.model.ModelApiResponse;
import org.ag.opensource.springtopics.service.EmployeeService;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Tag(name = "employees", description = "The employees API")
@RestController
@RequestMapping("/employees")
@RequiredArgsConstructor
@Validated
public class EmployeeController {

    private final EmployeeService employeeService;
    /**
     * GET /employees : Get all employees
     * Get all employees
     *
     * @return A list of employees (status code 200)
     * or No employee found (status code 404)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "getEmployees",
            summary = "Get all employees",
            description = "Get all employees",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A list of employees", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "No employee found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            }
    )
    @GetMapping()
    ResponseEntity<ModelApiResponse<List<EmployeeDto>>> getEmployees() {
        return employeeService.getAllEmployees();
    }

    /**
     * GET /employees/{id} : Get an employee by ID
     * Get an employee by ID
     *
     * @param id The ID of the employee to retrieve (required)
     * @return A single employee (status code 200)
     * or No employee found (status code 404)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "getEmployeeById",
            summary = "Get an employee by ID",
            description = "Get an employee by ID",
            responses = {
                    @ApiResponse(responseCode = "200", description = "A single employee", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "No employee found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            }
    )
    @GetMapping(value = "/{id}")
    ResponseEntity<ModelApiResponse<EmployeeDto>> getEmployeeById(
            @Parameter(name = "id", description = "The ID of the employee to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return employeeService.getEmployee(id);
    }

    /**
     * POST /employees : Create a new employee
     * Create a new employee
     *
     * @param employeeDto (required)
     * @return Employee created (status code 201)
     * or Invalid input (status code 405)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "createEmployee",
            summary = "Create a new employee",
            description = "Create a new employee",
            responses = {
                    @ApiResponse(responseCode = "201", description = "Employee created", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Invalid input", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            }
    )
    @PostMapping()
    ResponseEntity<ModelApiResponse<EmployeeDto>> createEmployee(
            @Parameter(name = "Employee", description = "", required = true) @RequestBody @Valid EmployeeDto employeeDto
    ) {
        return employeeService.createEmployee(employeeDto);
    }

    /**
     * PUT /employees/{id} : Update an employee by ID
     * Update an employee by ID
     *
     * @param id          The ID of the employee to update (required)
     * @param employeeDto (required)
     * @return Employee updated (status code 200)
     * or No employee found (status code 404)
     * or Invalid input (status code 405)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "updateEmployee",
            summary = "Update an employee by ID",
            description = "Update an employee by ID",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Employee updated", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "No employee found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "405", description = "Invalid input", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            }
    )
    @PutMapping("/{id}")
    ResponseEntity<ModelApiResponse<EmployeeDto>> updateEmployee(
            @Parameter(name = "id", description = "The ID of the employee to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
            @Parameter(name = "Employee", description = "", required = true) @Valid @RequestBody EmployeeDto employeeDto
    ) {
        return employeeService.updateEmployee(id, employeeDto);
    }

    /**
     * DELETE /employees/{id} : Delete an employee by ID
     * Delete an employee by ID
     *
     * @param id The ID of the employee to delete (required)
     * @return Employee deleted (status code 200)
     * or No employee found (status code 404)
     * or Internal server error (status code 500)
     */
    @Operation(
            operationId = "deleteEmployee",
            summary = "Delete an employee by ID",
            description = "Delete an employee by ID",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Employee deleted", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "No employee found", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    })
            }
    )
    @DeleteMapping("/{id}")
    ResponseEntity<ModelApiResponse<EmployeeDto>> deleteEmployee(
            @Parameter(name = "id", description = "The ID of the employee to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return employeeService.deleteEmployee(id);
    }

}

